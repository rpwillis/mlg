using System;
using System.ComponentModel;
using System.Runtime.InteropServices;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Xml.Serialization;
using Microsoft.SharePoint;
using Microsoft.SharePoint.WebPartPages;
using Microsoft.SharePoint.WebPartPages.Communication;
using System.Resources;
using System.Reflection;
using System.Globalization;
using System.DirectoryServices;
using MLG2007.Helper.Exchange;
using MLG2007.Helper.SharePointLearningKit;
using MLG2007.Helper.SharePoint;
using MLG2007.Helper.Calendar;


namespace MLG2007.WebParts.MyPlanner
{
    [Guid("6e1445f0-19fb-439b-b6f0-9fe10b905091")]
    //[DefaultProperty("ClassServerPwd"), ToolboxData("<{0}:Planner runat=server></{0}:Planner>"), XmlRoot(Namespace = "MyPlanner")]

    [ToolboxData("<{0}:Planner runat=server></{0}:Planner>"), XmlRoot(Namespace = "MLG2007.WebParts.MyPlanner")]
    public class MyPlanner : WebPart, ICellConsumer
    {

        public event CellConsumerInitEventHandler CellConsumerInit;
        private int _cellConnectedCount = 0;
        private bool webpartConnected = false;
        private string connectedWebpartName = string.Empty;
        private bool interfaceRegistrationError = false;
        private string connectedFieldName = string.Empty;
        private string userName = "";
        private const bool defaultIsParentMode = false;
        private string cellName = "Cell Data";
        private const int defaultTimeOutms = 10000;
        private const string defaultExchangeUrl = "";
        private const string defaultExchangeDomain = "";
        private const string defaultSchoolEventList = "";
        private const bool defaultShowSlk = true;
        private const string defaultUserPreferencesStoreUrl = "";
        private const bool defaultShowPersonalCalendar = true;
        private const AssignmentMode defaultAssignmentMode = AssignmentMode.All;
        private const bool defaultShowErrors = true;
        private const string defaultListTitles = "";
        private const string defaultCalendarIDs = "";
        private const string defaultCalendarsListUrl = "";
        private const string defaultPlannerRole = "";
        private const string defaultDnsName = "";
        private const bool defaultEnableOverRideDomain = false;
        private string exchangeUrl = defaultExchangeUrl;
        private string exchangeDomain = defaultExchangeDomain;
        private string schoolEventList = defaultSchoolEventList;
        private bool showErrors = defaultShowErrors;
        private AssignmentMode assignmentMode = defaultAssignmentMode;
        private bool showSLK = defaultShowSlk;
        private bool showPersonalCalendar = defaultShowPersonalCalendar;
        private string sharePointCalendarIDs = defaultCalendarIDs;
        private string exchangeCalendarIDs = defaultCalendarIDs;
        private string calendarsListUrl = defaultCalendarsListUrl;
        private string plannerRole = defaultPlannerRole;
        private string listTitles = defaultListTitles;
        private bool enableOverrideDomain = defaultEnableOverRideDomain;
        private string DNSname = defaultDnsName;
        private MLG2007.Helper.Calendar.Calendar myCal;
        private bool isParentMode = defaultIsParentMode;
        private ResourceManager rm = new ResourceManager("MLG2007.WebParts.MyPlanner.Strings", Assembly.GetExecutingAssembly());
        private MLG2007.Helper.CalendarStore.CalendarCollection calendars;
        private bool redrawWP = false;
        private string userPreferencesStoreUrl = defaultUserPreferencesStoreUrl;
        bool flag = false;
        private MLG2007.Helper.UserPreferences.UserPreferences preferences = new MLG2007.Helper.UserPreferences.UserPreferences ( );
        MLG2007.Helper.CalendarStore.CalendarStore calendarStore = new MLG2007.Helper.CalendarStore.CalendarStore();
        MLG2007.Helper.UserPreferences.UserPreferencesStore userPerferencesStore = new MLG2007.Helper.UserPreferences.UserPreferencesStore();

        // Must have this override for the ResourcesAttributes to work
        public override string LoadResource(string strId)
        {
            return rm.GetString(strId, CultureInfo.CurrentCulture);
        }


        #region Public properties
        /// <summary>
        /// In some cases, it may not be desirable to show errors generated by a web part 
        /// to the user. For example, when setting up the system in the first place, it 
        /// may be necessary to see errors, but after the configuration has been decided 
        /// on there may be no need to see any failures. This is especially the case when 
        /// the error is expected. For example, the My Planner web part consolidates 
        /// information from a number of different data sources. The Class Server data 
        /// source is not available for Parents or Teachers, so the web part will report 
        /// an error. In this case you would probably want to suppress errors.
        /// </summary>
        [Browsable(true),
           ResourcesAttribute("ShowErrName", "CatAdvanced", "ShowErrDesc"),
        DefaultValue(defaultShowErrors),
        WebPartStorage(Storage.Shared)]
        public bool ShowErrors
        {
            get
            {
                return showErrors;
            }

            set
            {
                showErrors = value;
            }
        }

        [Browsable(true),
    DefaultValue(defaultIsParentMode), ResourcesAttribute("IsParentMode", "CalendarStoreSettings", "IsParentModeDesc"),
        WebPartStorage(Storage.Shared)]
        public bool IsParentMode
        {
            get
            {
                return isParentMode;
            }

            set
            {
                isParentMode = value;
            }
        }


        /// <summary>
        /// This URL points to the exchange server. The web part will perform a WebDAV 
        /// query against this URL to retrieve a list of events for the current user.
        /// 
        /// e.g.   http://portal.demo.edu/exchange
        /// </summary>
        [Browsable(true),
           ResourcesAttribute("EXURLName", "CatExchange", "EXURLDesc"),
        DefaultValue(defaultExchangeUrl),
        WebPartStorage(Storage.Shared)]
        public string ExchangeUrl
        {
            get
            {
                return exchangeUrl;
            }

            set
            {
                exchangeUrl = value;
            }
        }

        /// <summary>
        /// The domain that the Exchange Server is in.
        /// 
        /// e.g. “demo”
        /// </summary>
        [Browsable(true),
           ResourcesAttribute("EXDomName", "CatExchange", "EXDomDesc"),
        DefaultValue(defaultExchangeDomain),
        WebPartStorage(Storage.Shared)]
        public string ExchangeDomain
        {
            get
            {
                return exchangeDomain;
            }

            set
            {
                exchangeDomain = value;
            }
        }

        /// <summary>
        /// Used to specify if using a domain other than the logged on user's default domain is enabled or not
        /// </summary>
        [Browsable(true),
             ResourcesAttribute("EnableOverrideDomainText", "CatExchange", "EnableOverrideDomainDesc"),
        DefaultValue(defaultEnableOverRideDomain),
        WebPartStorage(Storage.Shared)]
        public bool EnableOverrideDomain
        {
            get
            {
                return enableOverrideDomain;
            }

            set
            {
                enableOverrideDomain = value;
            }
        }

        /// <summary>
        /// This list specifies where the web part should read SharePoint events from. 
        /// Any number of comma-separated sites can be specified here.
        /// 
        /// e.g. “http://portal.demo.edu/schools/AmstelPS/Lists/Events,
        /// http://portal.demo.edu/C2/MySchedules/Lists/Events” 
        /// </summary>
        [Browsable(false),
             ResourcesAttribute("SPEventListName", "CatSharePoint", "SPEventListDesc"),
        DefaultValue(defaultSchoolEventList),
        WebPartStorage(Storage.Shared)]
        public string SchoolEventList
        {
            get
            {
                return schoolEventList;
            }

            set
            {
                schoolEventList = value;
            }
        }

        /// <summary>
        /// This list specifies the titles of the lists mentioned above. The number of 
        /// comma-separated titles must match the number of list URL(s) entered in the 
        /// Event List URL(s) property.
        /// 
        /// e.g. “School Events,Department Events” 
        /// </summary>
        [Browsable(false),
            ResourcesAttribute("LITName", "CatSharePoint", "LITDesc"),
        DefaultValue(defaultListTitles),
        WebPartStorage(Storage.Shared)]
        public string ListTitles
        {
            get
            {
                return listTitles;
            }

            set
            {
                listTitles = value;
            }
        }

        [Browsable(false),
      DefaultValue(defaultAssignmentMode),
        WebPartStorage(Storage.Shared)]
        public AssignmentMode Mode
        {
            get
            {
                return assignmentMode;
            }
            set
            {
                assignmentMode = value;
            }
        }

        [Browsable(true),
DefaultValue(defaultUserPreferencesStoreUrl), ResourcesAttribute("UserPreferencesStoreUrl", "CalendarStoreSettings", "UserPreferencesStoreDesc"),
      WebPartStorage(Storage.Shared)]
        public string UserPreferencesStoreUrl
        {
            get
            {
                return userPreferencesStoreUrl;
            }
            set
            {
                userPreferencesStoreUrl = value;
            }
        }

        [Browsable(true), ResourcesAttribute("CalendarStoreURL", "CalendarStoreSettings", "CalendarStoreUrlDesc"), DefaultValue(defaultCalendarsListUrl), WebPartStorage(Storage.Shared)]
        public string CalendarsListUrl
        {
            get { return calendarsListUrl; }
            set { calendarsListUrl = value; }
        }

        [Browsable(true), ResourcesAttribute("CalendarStoreRole", "CalendarStoreSettings", "CalendarStoreRoleDesc"), DefaultValue(defaultPlannerRole), WebPartStorage(Storage.Shared)]
        public string PlannerRole
        {
            get { return plannerRole; }
            set { plannerRole = value; }
        }

        [Browsable(true), ResourcesAttribute("DNSName", "CalendarStoreSettings", "DNSNameDesc"), DefaultValue(defaultPlannerRole), WebPartStorage(Storage.Shared)]
        public string DNSName
        {
            get { return DNSname; }
            set { DNSname = value; }
        }

      

        #endregion

        #region Personal Properties
        //[Browsable(false), DefaultValue(defaultShowSlk), WebPartStorage(Storage.Personal)]
        [Browsable(false), WebPartStorage(Storage.Personal)]
        public bool ShowSLK
        {
            get
            {
                return showSLK;
            }
            set
            {
                showSLK = value;
            }
        }

        //[Browsable(false), DefaultValue(defaultShowPersonalCalendar), WebPartStorage(Storage.Personal)]
        [Browsable(false),  WebPartStorage(Storage.Personal)]
        public bool ShowPersonalCalendar
        {
            get
            {
                return showPersonalCalendar;
            }
            set
            {
                showPersonalCalendar = value;
            }
        }

        //[Browsable(false), DefaultValue(defaultCalendarIDs), WebPartStorage(Storage.Personal)]
        [Browsable(false),  WebPartStorage(Storage.Personal)]
        public string SharePointCalendarIDList
        {
            get
            {
                return sharePointCalendarIDs;
            }
            set
            {
                sharePointCalendarIDs = value;
            }
        }

        //[Browsable(false), DefaultValue(defaultCalendarIDs), WebPartStorage(Storage.Personal)]
        [Browsable(false),  WebPartStorage(Storage.Personal)]
        public string ExchangeCalendarIDList
        {
            get
            {
                return exchangeCalendarIDs;
            }
            set
            {
                exchangeCalendarIDs = value;
            }
        }

        private string CalendarIDList
        {
            get
            {
                if (sharePointCalendarIDs.Length > 0 && exchangeCalendarIDs.Length > 0)
                    return sharePointCalendarIDs + ',' + exchangeCalendarIDs;
                else
                    if (sharePointCalendarIDs.Length == 0)
                        return exchangeCalendarIDs;
                    else
                        return sharePointCalendarIDs;
            }
        }

        #endregion

        #region Web connection
        public override void EnsureInterfaces()
        {
            try
            {
                RegisterInterface("MyPlannerCellConsumerInterface_WPQ_",
                    InterfaceTypes.ICellConsumer,
                    WebPart.UnlimitedConnections,
                    ConnectionRunAt.Server,
                    this,
                    "CellConsumerInterface_WPQ",
                    "Get Child",
                    "Get Child username");
            }
            catch (Exception exception)
            {

            }
        }
        public override ConnectionRunAt CanRunAt()
        {
            return ConnectionRunAt.Server;
        }

        public override void PartCommunicationConnect(string interfaceName, WebPart connectedPart, string connectedInterfaceName, ConnectionRunAt runAt)
        {
            if (interfaceName == "MyPlannerCellConsumerInterface_WPQ_")
            {
                webpartConnected = true;
                _cellConnectedCount++;
            }
        }

        public override void PartCommunicationInit()
        {
            if (_cellConnectedCount > 0)
            {

                if (CellConsumerInit != null)
                {
                    //Need to create the args for the CellConsumerInit event
                    CellConsumerInitEventArgs cellConsumerInitArgs = new CellConsumerInitEventArgs();

                    //Set the FieldName
                    cellConsumerInitArgs.FieldName = "User Name";

                    //Fire the CellConsumerInit event.
                    //This basically tells the Provider Web Part what type of
                    //cell the Consuemr is expecting in the CellReady event.
                    CellConsumerInit(this, cellConsumerInitArgs);
                }
            }
        }

        public override InitEventArgs GetInitEventArgs(string interfaceName)
        {
            //Check if this is my particular cell interface
            if (interfaceName == "MyPlannerCellConsumerInterface_WPQ_")
            {
                // EnsureChildControls();
                //this.ChildControlsCreated = false;
                //Need to create the args for the CellConsumerInit event
                CellConsumerInitEventArgs cellConsumerInitArgs = new CellConsumerInitEventArgs();

                //Set the FieldName
                cellConsumerInitArgs.FieldName = "User Name";

                //return the InitArgs
                return (cellConsumerInitArgs);
            }
            else
            {
                return (null);
            }

        }

        public void CellReady(object sender, CellReadyEventArgs cellReadyArgs)
        {

            //Set the label text to the value of the "Cell" that was passed by the Provider
            if (cellReadyArgs.Cell != null)
            {
                userName = cellReadyArgs.Cell.ToString();
                if (userName.Length > 0)
                {
                    ViewState["CurrentUser"] = userName;
                    
                }
                else
                {
                    if ( ViewState["CurrentUser"] != null)
                        userName = ViewState["CurrentUser"].ToString();
                }
                this.ChildControlsCreated = false;
            }
        }

        void RedrawWebPart(string userName)
        {
            //if (ViewState["CurrentUser"] == null)
            //{
            //    ViewState["CurrentUser"] = userName;
            //    //return true;
            //}
            //else
            //{
            //    if (ViewState["CurrentUser"].ToString() != userName)
            //        return true;
            //    else
            //        return false;
            //}
        }

        public void CellProviderInit(object sender, CellProviderInitEventArgs cellProviderInitArgs)
        {
            //This is where the Consumer part could see what type of "Cell" the Provider
            //will be sending.
            //connectedFieldName = SPEncode.HtmlEncode(cellProviderInitArgs.);

        }

        private bool WebpartCausedPostBack()
        {
            Control control = null;
            string ctrlname = Page.Request.Params["__EVENTTARGET"];
            if (ctrlname != null && ctrlname != String.Empty)
            {
                control = Page.FindControl(ctrlname);
            }
            // if __EVENTTARGET is null, the control is a button type and we need to 
            // iterate over the form collection to find it
            else
            {
                string ctrlStr = String.Empty;
                Control c = null;
                foreach (string ctl in Page.Request.Form)
                {
                    // handle ImageButton controls ...
                    if (ctl.EndsWith(".x") || ctl.EndsWith(".y"))
                    {
                        ctrlStr = ctl.Substring(0, ctl.Length - 2);
                        c = Page.FindControl(ctrlStr);
                    }
                    else
                    {
                        c = Page.FindControl(ctl);
                    }
                    if (c is System.Web.UI.WebControls.LinkButton ||
                        c is System.Web.UI.WebControls.ImageButton)
                    {
                        control = c;
                        break;
                    }
                }
            }

            if (control != null && (control.ID == "prevMonth" ||
                control.ID == "nextMonth" ||
                control.ID == "reload"))
            {
                return true;
            }

            return false;
        }

        private string GetClickedControl()
        {
            Control control = null;
            string ctrlname = Page.Request.Params["__EVENTTARGET"];
            if (ctrlname != null && ctrlname != String.Empty)
            {
                control = Page.FindControl(ctrlname);
            }
            // if __EVENTTARGET is null, the control is a button type and we need to 
            // iterate over the form collection to find it
            else
            {
                string ctrlStr = String.Empty;
                Control c = null;
                foreach (string ctl in Page.Request.Form)
                {
                    // handle ImageButton controls ...
                    if (ctl.EndsWith(".x") || ctl.EndsWith(".y"))
                    {
                        ctrlStr = ctl.Substring(0, ctl.Length - 2);
                        c = Page.FindControl(ctrlStr);
                    }
                    else
                    {
                        c = Page.FindControl(ctl);
                    }
                    if (c is System.Web.UI.WebControls.LinkButton ||
                        c is System.Web.UI.WebControls.ImageButton)
                    {
                        control = c;
                        break;
                    }
                }
            }
            return control.ID;
        }
        #endregion

        protected override void CreateChildControls()
        {

            
            if (IsParentMode && userName.Length == 0)
            {
                Controls.Add(new LiteralControl("No user selected"));
                return;
            }

            if (exchangeUrl == "" || exchangeDomain == "" || plannerRole == "" || calendarsListUrl == "" || userPreferencesStoreUrl=="" || DNSname=="" ) 
            {
                Controls.Add(new LiteralControl(rm.GetString("PropNotSet", CultureInfo.CurrentCulture)));
                return;
            }
            calendarStore.CalendarListURL = this.Page.Server.HtmlEncode(this.CalendarsListUrl);

            if (!calendarStore.IsRoleExist(plannerRole))
            {
                Controls.Add(new LiteralControl(string.Format(rm.GetString("RoleMissing", CultureInfo.CurrentCulture), plannerRole, calendarsListUrl)));
                return;

            }

            if (!userPerferencesStore.IsUserPerefencesExist(userPreferencesStoreUrl))
            {
                Controls.Add(new LiteralControl(string.Format(rm.GetString("UserPreferencesStoreMissing", CultureInfo.CurrentCulture), userPreferencesStoreUrl)));
                return;

            }
            userPerferencesStore.UserPreferencesStoreUrl = userPreferencesStoreUrl;
            calendars = GetCalendars(this.PlannerRole);
            //System.Web.httpcon

            try
            {
                GetFormsParameters();
                IdentifySelectedCalendar(CalendarIDList, calendars);

                myCal = new MLG2007.Helper.Calendar.Calendar(ShowSLK, ShowPersonalCalendar, SharePointCalendarIDList, ExchangeCalendarIDList, calendars);

                myCal.CssClass = "ms-cal";
                myCal.CssDayClass = "ms-cal-workitem";
                myCal.CssDayOtherMonthClass = "ms-cal-nodataMid";
                myCal.CssDayHeading = "ms-cal-weekday";
                myCal.CssHeadClass = "ms-cal-nodataMid";
                myCal.CssShowMoreClass = "ShowMoreHead";
                myCal.CssAppointment = "Appointment";
                myCal.CssCurrDayClass = "ms-cal-workitem";
                myCal.CellPadding = 0;
                myCal.CellSpacing = 0;
                myCal.SiteCollectionURL = SPContext.Current.Site.Url;
                myCal.SLKMode = (int)Mode;
                myCal.DNSName = this.DNSName;



                myCal.UserID = GetMyPlannerUser();
                myCal.ExURL = ExchangeUrl;
                myCal.Domain = ExchangeDomain;
                System.Uri url = new Uri(new Uri(this.Context.Request.Url.ToString()), CalendarsListUrl);
                myCal.SPSURL = url.OriginalString;


                myCal.SPSTitles = listTitles;
                myCal.ShowErrors = ShowErrors;
                myCal.EnableOverrideDomain = EnableOverrideDomain;
                ////////////////////////////////////////////////////////////////////////////////
                CommandEventHandler prevMonthEventHandler = new CommandEventHandler(MonthChange);
                CommandEventHandler nextMonthEventHandler = new CommandEventHandler(MonthChange);
                CommandEventHandler reloadEventHandler = new CommandEventHandler(MonthChange);
                myCal.nextMonth.Command += prevMonthEventHandler;
                myCal.prevMonth.Command += nextMonthEventHandler;
                myCal.reloadButton.Command += reloadEventHandler;
                Controls.Add(new LiteralControl("<LINK href=\"/_layouts/" + System.Threading.Thread.CurrentThread.CurrentUICulture.LCID + "/LgUtilities/Styles/CustomStyles.css\" type=\"text/css\" rel=\"stylesheet\">"));
                Controls.Add(new LiteralControl("<LINK href=\"/_layouts/" + System.Threading.Thread.CurrentThread.CurrentUICulture.LCID + "/LgUtilities/Styles/dropdown.css\" type=\"text/css\" rel=\"stylesheet\">"));

                if ( IsTheamDefault ( ) )
                Controls.Add(new LiteralControl("<LINK href=\"/_layouts/" + System.Threading.Thread.CurrentThread.CurrentUICulture.LCID + "/Styles/Calendar.css\" type=\"text/css\" rel=\"stylesheet\">"));

                Controls.Add(new LiteralControl("<script language=\"javascript\" src=\"/_layouts/" + System.Threading.Thread.CurrentThread.CurrentUICulture.LCID + "/LgUtilities/scripts/scripts.js\"></script>"));
                //Controls.Add(new LiteralControl(string.Format(scriptTag, selectCalendarProcedure, unselctedCalendarProcedure, toggleShowExchangeProcedure, toggleShowSLKProcedure, selectCalendarEProcedure, unselctedCalendaErProcedure)));
                Controls.Add(myCal);

                

                if (!this.Page.IsPostBack || !WebpartCausedPostBack())
                {
                    myCal.StartDate = System.DateTime.Parse("1-" + DateTime.Now.ToLocalTime().ToString("MMM-yyyy"));
                    myCal.EndDate = myCal.StartDate.AddMonths(1);
                    // Get a data set
                    myCal.EventList = GetData(myCal.StartDate.ToUniversalTime(), myCal.EndDate.ToUniversalTime());
                    myCal.DataBind();

                }
                else
                {
                    if (WebpartCausedPostBack() && IsParentMode)
                    {
                        if (GetClickedControl() == "prevMonth")
                        {
                            prevMonthEventHandler(myCal.prevMonth, new CommandEventArgs(myCal.prevMonth.CommandName, myCal.prevMonth.CommandArgument));
                        }
                        else
                        {
                            if (GetClickedControl() == "nextMonth")
                            {
                                nextMonthEventHandler(myCal.prevMonth, new CommandEventArgs(myCal.nextMonth.CommandName, myCal.nextMonth.CommandArgument));
                            }
                            else
                            {
                                if (GetClickedControl() == "reload")
                                    reloadEventHandler(myCal.prevMonth, new CommandEventArgs(myCal.reloadButton.CommandName, myCal.reloadButton.CommandArgument));
                            }
                        }
                    }
                    //ViewState["Flag"] = null;
                }
                //Disabled saving the Properties becasue of the publishing issue,
                //this.SaveProperties = true;
                
            }

            catch (Exception ex)
            {
                AddErrorMessage(String.Format(rm.GetString("Error", CultureInfo.CurrentCulture) + ex.Message));
            }
        }
        private bool IsConnectedWebPartFirstLoad()
        {
            if (ViewState["ConnectedWebPartFirstLoad"] == null)
            {
                ViewState["ConnectedWebPartFirstLoad"] = "DummyValue";
                return true;
            }
            else
                return false;
        }
        private string GetMyPlannerUser()
        {
            if (_cellConnectedCount > 0)
            {
                return userName;
            }
            else
            {
                if (this.Context.Request.QueryString["UserID"] != null)
                    return this.Context.Request.QueryString["UserID"];
                else
                    return this.Context.User.Identity.Name;
            }
        }
        private void GetFormsParameters()
        {
            if (this.Page.IsPostBack)
            {
                if (!webpartConnected)
                {
                    #region If not Connected & Is a postback
                    if (this.Context.Request.Form["showslk"] != null)
                    {
                        this.ShowSLK = (this.Context.Request.Form["showslk"].ToString() == "1") ? true : false;
                        preferences.ShowAssignments = this.ShowSLK;
                    }

                    if (this.Context.Request.Form["showExchange"] != null)
                    {
                        this.ShowPersonalCalendar = (this.Context.Request.Form["showExchange"].ToString() == "1") ? true : false;
                        preferences.ShowPersonalCalendar = this.ShowPersonalCalendar;
                    }

                    if (this.Context.Request.Form["selectedCalendars"] != null)
                    {
                        if (this.Context.Request.Form["selectedCalendars"].Length > 0)
                        {
                            this.SharePointCalendarIDList = this.Context.Request.Form["selectedCalendars"];
                            preferences.WssCalendars = this.SharePointCalendarIDList;
                        }

                    }

                    if (this.Context.Request.Form["selectedCalendarsE"] != null)
                    {
                        if (this.Context.Request.Form["selectedCalendarsE"].Length > 0)
                        {
                            this.ExchangeCalendarIDList = this.Context.Request.Form["selectedCalendarsE"];
                            preferences.ExchangeCalendars = this.ExchangeCalendarIDList;
                        }
                    }
                    userPerferencesStore.SaveUserPreferences(preferences, this.Context.User.Identity.Name, false);
                    #endregion
                }
                else
                {
                    #region if Connected & Is a postback
                    if (IsConnectedWebPartFirstLoad())
                    {
                        #region If First Load
                        preferences = userPerferencesStore.GetUserPreferences(this.Context.User.Identity.Name);
                        this.ShowSLK = preferences.ShowAssignments;
                        this.ShowPersonalCalendar = preferences.ShowPersonalCalendar;
                        this.SharePointCalendarIDList = (preferences.WssCalendars == null) ? "" : preferences.WssCalendars;
                        this.ExchangeCalendarIDList = (preferences.ExchangeCalendars == null) ? "" : preferences.ExchangeCalendars;
                        #endregion
                    }
                    else
                    {
                        #region If Not first load and is a postback
                        if (this.Context.Request.Form["showslk"] != null)
                        {
                            this.ShowSLK = (this.Context.Request.Form["showslk"].ToString() == "1") ? true : false;
                            preferences.ShowAssignments = this.ShowSLK;
                        }

                        if (this.Context.Request.Form["showExchange"] != null)
                        {
                            this.ShowPersonalCalendar = (this.Context.Request.Form["showExchange"].ToString() == "1") ? true : false;
                            preferences.ShowPersonalCalendar = this.ShowPersonalCalendar;
                        }

                        if (this.Context.Request.Form["selectedCalendars"] != null)
                        {
                            if (this.Context.Request.Form["selectedCalendars"].Length > 0)
                            {
                                this.SharePointCalendarIDList = this.Context.Request.Form["selectedCalendars"];
                                preferences.WssCalendars = this.SharePointCalendarIDList;
                            }

                        }

                        if (this.Context.Request.Form["selectedCalendarsE"] != null)
                        {
                            if (this.Context.Request.Form["selectedCalendarsE"].Length > 0)
                            {
                                this.ExchangeCalendarIDList = this.Context.Request.Form["selectedCalendarsE"];
                                preferences.ExchangeCalendars = this.ExchangeCalendarIDList;
                            }
                        }
                        userPerferencesStore.SaveUserPreferences(preferences, this.Context.User.Identity.Name, false);
                        #endregion
                    }
                    #endregion
                }
               
            }
            else
            {
                preferences = userPerferencesStore.GetUserPreferences(this.Context.User.Identity.Name);
                this.ShowSLK = preferences.ShowAssignments;
                this.ShowPersonalCalendar = preferences.ShowPersonalCalendar;
                this.SharePointCalendarIDList = (preferences.WssCalendars == null) ? "" : preferences.WssCalendars;
                this.ExchangeCalendarIDList = (preferences.ExchangeCalendars == null) ? "" : preferences.ExchangeCalendars;

            }
        }
        private void IdentifySelectedCalendar(string calendarIDList, MLG2007.Helper.CalendarStore.CalendarCollection calendarsCollection)
        {
            if (calendarsCollection != null)
            {              
                if (calendarIDList.Length > 0)
                {
                    string[] m_calendaridList = calendarIDList.Split(',');
                    for (int i = 0; i < m_calendaridList.Length; i++)
                    {
                        string tmpID = m_calendaridList[i];
                        foreach (MLG2007.Helper.CalendarStore.Calendar tmpCalendar in calendarsCollection)
                        {
                            if (tmpID == tmpCalendar.CalendarId.ToString())
                            {
                                tmpCalendar.IsUserSelected = true;
                                break;
                            }
                        }
                    }
                }
            }
        }
        private void MonthChange(object sender, CommandEventArgs e)
        {
            try
            {
                try
                {
                    myCal.StartDate = DateTime.Parse(e.CommandArgument.ToString());
                }
                catch
                {
                    myCal.StartDate = System.DateTime.Parse("1-" + DateTime.Now.ToLocalTime().ToString("MMM-yyyy"));
                }
                myCal.EndDate = myCal.StartDate.AddMonths(1);

                myCal.EventList = GetData(myCal.StartDate.ToUniversalTime(), myCal.EndDate.ToUniversalTime());
                myCal.DataBind();
                myCal.Dispose();
            }
            catch (Exception exception)
            {
                AddErrorMessage(String.Format(rm.GetString("Error", CultureInfo.CurrentCulture) + exception.Message + "<br>" + exception.StackTrace));
            }

        }
        private Appointments GetData(DateTime StartDate, DateTime EndDate)
        {


            string[] calendarIds;
            string calendarNames = string.Empty;
            string calendarUrls = string.Empty;
            string exchangeCalednarsUrls = string.Empty;

            Appointments appointments = new Appointments();
            string userID;

            if (this.Context.Request.QueryString["UserID"] != null)
                userID = this.Context.Request.QueryString["UserID"];
            else
                userID = this.Context.User.Identity.Name;


            // SLK data
            SLKEvents slkData = new SLKEvents();
            if (webpartConnected)
                slkData.Username = userName;
            else
                slkData.Username = this.Context.User.Identity.Name;
            slkData.StartDate = StartDate;
            slkData.EndDate = EndDate;
            slkData.ClassesUrl = SPContext.Current.Site.RootWeb.Url;
            slkData.Mode = Mode;


            // Strip domain name from the user ID
            if (userID.IndexOf("\\") != 0)
                userID = userID.Substring(userID.LastIndexOf("\\") + 1);

            // Exchange
            ExchEvents exdata = new ExchEvents();
            exdata.UTCStartDate = StartDate;
            exdata.UTCEndDate = EndDate;
            exdata.ExchangeUser = userID;
            exdata.ExchangePassword = this.Context.Request.ServerVariables["AUTH_PASSWORD"].ToString();

            exdata.ExchangeURL = ExchangeUrl;
            exdata.ExchangeDomain = ExchangeDomain;

            //If overriding exchange default mail alias is enabled, get the user mail from the Active Directory
            if (EnableOverrideDomain)
            {
                exdata.User = GetUserMail(userID);
            }
            else
                exdata.User = userID;


            ExchEvents exdataPC = new ExchEvents();
            exdataPC.UTCStartDate = StartDate;
            exdataPC.UTCEndDate = EndDate;
            exdataPC.ExchangeUser = userID;
            exdataPC.ExchangePassword = this.Context.Request.ServerVariables["AUTH_PASSWORD"].ToString();

            exdataPC.ExchangeURL = ExchangeUrl;
            exdataPC.ExchangeDomain = ExchangeDomain;
            if (EnableOverrideDomain)
            {
                exdataPC.User = GetUserMail(userID);
            }
            else
                exdataPC.User = userID;

            // SharePoint
            //SPSEvents spsdata = new SPSEvents();
            //spsdata.StartDate = StartDate;
            //spsdata.EndDate = EndDate;
            //spsdata.EventLists = SchoolEventList;
            //spsdata.Cont = this.Context;
            //spsdata.ListTitles = listTitles;

            //Getting the selected Calendars
            if (calendars != null)
            {
                calendarIds = CalendarIDList.Split(',');
                MLG2007.Helper.CalendarStore.CalendarStore store = new MLG2007.Helper.CalendarStore.CalendarStore();

                foreach (MLG2007.Helper.CalendarStore.Calendar calObj in calendars)
                {
                    string temp = null;

                    if (calObj.IsUserSelected)
                    {
                        try
                        {
                            store.CalendarListURL = CalendarsListUrl;
                            //calObj = store.GetCalendarbyID(int.Parse(id));
                            if (calObj != null)
                            {
                                if (calObj.CalendarType == MLG2007.Helper.CalendarStore.CalendarType.SharePoint)
                                {
                                    store.ParseSiteUrl(calObj.CalendarUrl, out temp);
                                    if (calendarNames.Length > 0)
                                    {
                                        calendarNames += ',' + temp;

                                    }
                                    else
                                    {
                                        calendarNames += temp;
                                    }

                                    if (calendarUrls.Length > 0)
                                    {
                                        calendarUrls += ',' + calObj.CalendarUrl;

                                    }
                                    else
                                    {
                                        calendarUrls += calObj.CalendarUrl;
                                    }
                                }
                                else
                                {
                                    if (exchangeCalednarsUrls.Length > 0)
                                    {
                                        exchangeCalednarsUrls += "," + this.Page.Server.HtmlEncode(calObj.CalendarUrl);
                                    }
                                    else
                                    {
                                        exchangeCalednarsUrls += this.Page.Server.HtmlEncode(calObj.CalendarUrl); ;
                                    }
                                }
                            }
                        }
                        catch (Exception exception)
                        {
                            continue;
                        }

                    }

                }
                SPSEvents calendarsEvents = null;
                if (calendarUrls.Length != 0)
                {
                    calendarsEvents = new SPSEvents();
                    calendarsEvents.StartDate = StartDate;
                    calendarsEvents.EndDate = EndDate;
                    calendarsEvents.EventLists = calendarUrls;
                    calendarsEvents.Cont = this.Context;
                    calendarsEvents.ListTitles = calendarNames.Replace("%20", " ");
                    calendarsEvents.DNSName = this.DNSName;
                    calendarsEvents.GetData();
                    if ( calendarsEvents.HasError )
                        AddErrorMessage(String.Format(rm.GetString("Error", CultureInfo.CurrentCulture) + "(SharePoint) " + calendarsEvents.ErrorDesc));
                    else
                    appointments.Merge(calendarsEvents);
                calendarsEvents.Dispose();
                }

            }

            if (exchangeCalednarsUrls.Length > 0)
            {
                string[] tmpArray = exchangeCalednarsUrls.Split(',');
                foreach (string tmp2 in tmpArray)
                {
                    exdataPC.GetPublicCalendarData(tmp2);
                }
                appointments.Merge(exdataPC);
            }

            if (this.ShowPersonalCalendar)
            {
                // Call the GetData() methods asynchronously
                ExGetDataDelegate exGetDataDelegate = new ExGetDataDelegate(exdata.GetData);
                //SLKGetDataDelegate slkGetDataDelegate = new SLKGetDataDelegate(slkData.GetData);
                //SPGetDataDelegate spGetDataDelegate = new SPGetDataDelegate(spsdata.GetData);

                IAsyncResult exResult = exGetDataDelegate.BeginInvoke(null, null);
                //IAsyncResult slkResult = slkGetDataDelegate.BeginInvoke(null, null);
                //IAsyncResult spResult = spGetDataDelegate.BeginInvoke(null, null);
                exResult.AsyncWaitHandle.WaitOne(defaultTimeOutms, false);


                if (!exResult.IsCompleted)
                    AddErrorMessage(String.Format(rm.GetString("NoEX", CultureInfo.CurrentCulture)));
                else
                {
                    if (exdata.HasError)
                        AddErrorMessage(String.Format(rm.GetString("Error", CultureInfo.CurrentCulture) + "(Exchange) " + exdata.ErrorDesc));
                    else
                        appointments.Merge(exdata);

                    exdata.Dispose();
                }
            }
            // TODO: Make this work asynchronously
            //exdata.GetData();
            if (this.ShowSLK)
                slkData.GetData();
            //spsdata.GetData();

            //Set the class server cookie
            //System.Web.HttpCookie cookieNew = new System.Web.HttpCookie("MSCSTicket", csdata.ClassServerTicket);
            //this.Context.Response.Cookies.Add(cookieNew);



            //slkResult.AsyncWaitHandle.WaitOne(defaultTimeOutms, false);
            //spResult.AsyncWaitHandle.WaitOne(defaultTimeOutms, false);

            // Display errors if necessary, otherwise add the result to the appointments dataset


            //if (!slkResult.IsCompleted)
            //    AddErrorMessage(String.Format(rm.GetString("NoCS", CultureInfo.CurrentCulture)));
            //else
            //{
            if (slkData.HasError)
                AddErrorMessage(String.Format(rm.GetString("Error", CultureInfo.CurrentCulture) + "(SharePoint Learning Kit) " + slkData.ErrorDescription));
            else
                appointments.Merge(slkData);

            slkData.Dispose();
            // }

            //if (!spResult.IsCompleted)
            //    Controls.Add(new LiteralControl(String.Format(rm.GetString("NoSPS", CultureInfo.CurrentCulture))));
            //else
            //{
            //if (spsdata.HasError)
            //    //AddErrorMessage(String.Format(rm.GetString("Error", CultureInfo.CurrentCulture) + "(SharePoint) " + spsdata.ErrorDesc));
            //    AddErrorMessage("XXX");
            //else
            //    appointments.Merge(spsdata);

            //spsdata.Dispose();
            // }

            return appointments;
        }
        private bool IsTheamDefault()
        {
            SPWeb webObject = SPContext.Current.Web;
            if (webObject != null)
            {
                if (webObject.Theme.Length == 0)
                    return true;
                return false;
            }
            return false;
        }
        private string GetUserMail(string userID)
        {
            SearchResultCollection resCol = null;
            DirectorySearcher mySearcher = null;

            try
            {
                //strip domain name from the user id
                if (userID.IndexOf("\\") != 0)
                    userID = userID.Substring(userID.LastIndexOf("\\") + 1);

                mySearcher = new DirectorySearcher();
                string PropertyName = "mail";
                mySearcher.PropertiesToLoad.Add(PropertyName);
                mySearcher.Filter = "(&(objectCategory=user)(samaccountname=" + userID + "))";
                resCol = mySearcher.FindAll();

                if (resCol.Count != 1)
                {
                    Page.Response.Write("User Not Found");
                    return "";
                }

                if (resCol[0].Properties[PropertyName] == null)
                {
                    Page.Response.Write("Property mail not found");
                    return "";
                }

                if ((resCol[0].Properties[PropertyName].Count == 1))
                    return resCol[0].Properties[PropertyName][0].ToString();
                else
                {
                    Page.Response.Write("User has more than 1 mail");
                    return "";
                }
            }

            finally
            {
                resCol.Dispose();
                mySearcher.Dispose();
            }
            //dirEntry.Close();

        }
        private void AddErrorMessage(string Message)
        {
            if (showErrors)
                Controls.Add(new LiteralControl("<BR>" + Message + "<BR>"));
        }
        private MLG2007.Helper.CalendarStore.CalendarCollection GetCalendars(string role)
        {
            MLG2007.Helper.CalendarStore.CalendarCollection calendarCollection = null;
            MLG2007.Helper.CalendarStore.CalendarStore calendarStore = new MLG2007.Helper.CalendarStore.CalendarStore();
            calendarStore.CalendarListURL = this.Page.Server.UrlDecode(this.CalendarsListUrl);
            try
            {
                calendarCollection = calendarStore.GetCalendarByRole(role);
            }
            catch (Exception exception)
            {
                //ToDO:Write Handling code overhere
            }
            return calendarCollection;
        }
        private delegate void ExGetDataDelegate();
        private delegate void SLKGetDataDelegate();
        private delegate void SPGetDataDelegate();
    }
}
