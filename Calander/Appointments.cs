//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

// 
// This source code was auto-generated by xsd, Version=2.0.50727.42.
// 


[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
[Serializable()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.ComponentModel.ToolboxItem(true)]
[System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
[System.Xml.Serialization.XmlRootAttribute("Appointments")]
[System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
public partial class Appointments : System.Data.DataSet
{

    private AppointmentDataTable tableAppointment;

    private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;

    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public Appointments()
    {
        this.BeginInit();
        this.InitClass();
        System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
        base.Tables.CollectionChanged += schemaChangedHandler;
        base.Relations.CollectionChanged += schemaChangedHandler;
        this.EndInit();
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected Appointments(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
        :
            base(info, context, false)
    {
        if ((this.IsBinarySerialized(info, context) == true))
        {
            this.InitVars(false);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler1;
            this.Relations.CollectionChanged += schemaChangedHandler1;
            return;
        }
        string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
        if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema))
        {
            System.Data.DataSet ds = new System.Data.DataSet();
            ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            if ((ds.Tables["Appointment"] != null))
            {
                base.Tables.Add(new AppointmentDataTable(ds.Tables["Appointment"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        else
        {
            this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
        }
        this.GetSerializationData(info, context);
        System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
        base.Tables.CollectionChanged += schemaChangedHandler;
        this.Relations.CollectionChanged += schemaChangedHandler;
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [System.ComponentModel.Browsable(false)]
    [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
    public AppointmentDataTable Appointment
    {
        get
        {
            return this.tableAppointment;
        }
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [System.ComponentModel.BrowsableAttribute(true)]
    [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
    public override System.Data.SchemaSerializationMode SchemaSerializationMode
    {
        get
        {
            return this._schemaSerializationMode;
        }
        set
        {
            this._schemaSerializationMode = value;
        }
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
    public new System.Data.DataTableCollection Tables
    {
        get
        {
            return base.Tables;
        }
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
    public new System.Data.DataRelationCollection Relations
    {
        get
        {
            return base.Relations;
        }
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected override void InitializeDerivedDataSet()
    {
        this.BeginInit();
        this.InitClass();
        this.EndInit();
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public override System.Data.DataSet Clone()
    {
        Appointments cln = ((Appointments)(base.Clone()));
        cln.InitVars();
        cln.SchemaSerializationMode = this.SchemaSerializationMode;
        return cln;
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected override bool ShouldSerializeTables()
    {
        return false;
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected override bool ShouldSerializeRelations()
    {
        return false;
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected override void ReadXmlSerializable(System.Xml.XmlReader reader)
    {
        if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema))
        {
            this.Reset();
            System.Data.DataSet ds = new System.Data.DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Appointment"] != null))
            {
                base.Tables.Add(new AppointmentDataTable(ds.Tables["Appointment"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        else
        {
            this.ReadXml(reader);
            this.InitVars();
        }
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected override System.Xml.Schema.XmlSchema GetSchemaSerializable()
    {
        System.IO.MemoryStream stream = new System.IO.MemoryStream();
        this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
        stream.Position = 0;
        return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal void InitVars()
    {
        this.InitVars(true);
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal void InitVars(bool initTable)
    {
        this.tableAppointment = ((AppointmentDataTable)(base.Tables["Appointment"]));
        if ((initTable == true))
        {
            if ((this.tableAppointment != null))
            {
                this.tableAppointment.InitVars();
            }
        }
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private void InitClass()
    {
        this.DataSetName = "Appointments";
        this.Prefix = "";
        this.Locale = new System.Globalization.CultureInfo("en-AU");
        this.EnforceConstraints = true;
        this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        this.tableAppointment = new AppointmentDataTable();
        base.Tables.Add(this.tableAppointment);
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializeAppointment()
    {
        return false;
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e)
    {
        if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove))
        {
            this.InitVars();
        }
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs)
    {
        Appointments ds = new Appointments();
        System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
        System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
        xs.Add(ds.GetSchemaSerializable());
        System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
        any.Namespace = ds.Namespace;
        sequence.Items.Add(any);
        type.Particle = sequence;
        return type;
    }

    public delegate void AppointmentRowChangeEventHandler(object sender, AppointmentRowChangeEvent e);

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.Serializable()]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class AppointmentDataTable : System.Data.DataTable, System.Collections.IEnumerable
    {

        private System.Data.DataColumn columnTitle;

        private System.Data.DataColumn columnURL;

        private System.Data.DataColumn columnID;

        private System.Data.DataColumn columnBeginDate;

        private System.Data.DataColumn columnEndDate;

        private System.Data.DataColumn columnLocation;

        private System.Data.DataColumn columnDescription;

        private System.Data.DataColumn columnSubject;

        private System.Data.DataColumn columnSource;

        private System.Data.DataColumn columnRecurrent;

        private System.Data.DataColumn columnSLKEvent;

        private System.Data.DataColumn columnAllDayEvent;

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public AppointmentDataTable()
        {
            this.TableName = "Appointment";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal AppointmentDataTable(System.Data.DataTable table)
        {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive))
            {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
            {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace))
            {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected AppointmentDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
            :
                base(info, context)
        {
            this.InitVars();
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Data.DataColumn TitleColumn
        {
            get
            {
                return this.columnTitle;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Data.DataColumn URLColumn
        {
            get
            {
                return this.columnURL;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Data.DataColumn IDColumn
        {
            get
            {
                return this.columnID;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Data.DataColumn BeginDateColumn
        {
            get
            {
                return this.columnBeginDate;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Data.DataColumn EndDateColumn
        {
            get
            {
                return this.columnEndDate;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Data.DataColumn LocationColumn
        {
            get
            {
                return this.columnLocation;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Data.DataColumn DescriptionColumn
        {
            get
            {
                return this.columnDescription;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Data.DataColumn SubjectColumn
        {
            get
            {
                return this.columnSubject;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Data.DataColumn SourceColumn
        {
            get
            {
                return this.columnSource;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Data.DataColumn RecurrentColumn
        {
            get
            {
                return this.columnRecurrent;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Data.DataColumn SLKEventColumn
        {
            get
            {
                return this.columnSLKEvent;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Data.DataColumn AllDayEventColumn
        {
            get
            {
                return this.columnAllDayEvent;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        public int Count
        {
            get
            {
                return this.Rows.Count;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public AppointmentRow this[int index]
        {
            get
            {
                return ((AppointmentRow)(this.Rows[index]));
            }
        }

        public event AppointmentRowChangeEventHandler AppointmentRowChanging;

        public event AppointmentRowChangeEventHandler AppointmentRowChanged;

        public event AppointmentRowChangeEventHandler AppointmentRowDeleting;

        public event AppointmentRowChangeEventHandler AppointmentRowDeleted;

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddAppointmentRow(AppointmentRow row)
        {
            this.Rows.Add(row);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public AppointmentRow AddAppointmentRow(string Title, string URL, string ID, System.DateTime BeginDate, System.DateTime EndDate, string Location, string Description, string Subject, string Source, bool Recurrent, bool SLKEvent, bool AllDayEvent)
        {
            AppointmentRow rowAppointmentRow = ((AppointmentRow)(this.NewRow()));
            rowAppointmentRow.ItemArray = new object[] {
                    Title,
                    URL,
                    ID,
                    BeginDate,
                    EndDate,
                    Location,
                    Description,
                    Subject,
                    Source,
                    Recurrent,
                    SLKEvent,
                    AllDayEvent};
            this.Rows.Add(rowAppointmentRow);
            return rowAppointmentRow;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual System.Collections.IEnumerator GetEnumerator()
        {
            return this.Rows.GetEnumerator();
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataTable Clone()
        {
            AppointmentDataTable cln = ((AppointmentDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Data.DataTable CreateInstance()
        {
            return new AppointmentDataTable();
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars()
        {
            this.columnTitle = base.Columns["Title"];
            this.columnURL = base.Columns["URL"];
            this.columnID = base.Columns["ID"];
            this.columnBeginDate = base.Columns["BeginDate"];
            this.columnEndDate = base.Columns["EndDate"];
            this.columnLocation = base.Columns["Location"];
            this.columnDescription = base.Columns["Description"];
            this.columnSubject = base.Columns["Subject"];
            this.columnSource = base.Columns["Source"];
            this.columnRecurrent = base.Columns["Recurrent"];
            this.columnSLKEvent = base.Columns["SLKEvent"];
            this.columnAllDayEvent = base.Columns["AllDayEvent"];
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass()
        {
            this.columnTitle = new System.Data.DataColumn("Title", typeof(string), null, System.Data.MappingType.Element);
            base.Columns.Add(this.columnTitle);
            this.columnURL = new System.Data.DataColumn("URL", typeof(string), null, System.Data.MappingType.Element);
            base.Columns.Add(this.columnURL);
            this.columnID = new System.Data.DataColumn("ID", typeof(string), null, System.Data.MappingType.Element);
            base.Columns.Add(this.columnID);
            this.columnBeginDate = new System.Data.DataColumn("BeginDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
            base.Columns.Add(this.columnBeginDate);
            this.columnEndDate = new System.Data.DataColumn("EndDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
            base.Columns.Add(this.columnEndDate);
            this.columnLocation = new System.Data.DataColumn("Location", typeof(string), null, System.Data.MappingType.Element);
            base.Columns.Add(this.columnLocation);
            this.columnDescription = new System.Data.DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
            base.Columns.Add(this.columnDescription);
            this.columnSubject = new System.Data.DataColumn("Subject", typeof(string), null, System.Data.MappingType.Element);
            base.Columns.Add(this.columnSubject);
            this.columnSource = new System.Data.DataColumn("Source", typeof(string), null, System.Data.MappingType.Element);
            base.Columns.Add(this.columnSource);
            this.columnRecurrent = new System.Data.DataColumn("Recurrent", typeof(bool), null, System.Data.MappingType.Element);
            base.Columns.Add(this.columnRecurrent);
            this.columnSLKEvent = new System.Data.DataColumn("SLKEvent", typeof(bool), null, System.Data.MappingType.Element);
            base.Columns.Add(this.columnSLKEvent);
            this.columnAllDayEvent = new System.Data.DataColumn("AllDayEvent", typeof(bool), null, System.Data.MappingType.Element);
            base.Columns.Add(this.columnAllDayEvent);
            this.columnRecurrent.DefaultValue = ((bool)(false));
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public AppointmentRow NewAppointmentRow()
        {
            return ((AppointmentRow)(this.NewRow()));
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new AppointmentRow(builder);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Type GetRowType()
        {
            return typeof(AppointmentRow);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e)
        {
            base.OnRowChanged(e);
            if ((this.AppointmentRowChanged != null))
            {
                this.AppointmentRowChanged(this, new AppointmentRowChangeEvent(((AppointmentRow)(e.Row)), e.Action));
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e)
        {
            base.OnRowChanging(e);
            if ((this.AppointmentRowChanging != null))
            {
                this.AppointmentRowChanging(this, new AppointmentRowChangeEvent(((AppointmentRow)(e.Row)), e.Action));
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e)
        {
            base.OnRowDeleted(e);
            if ((this.AppointmentRowDeleted != null))
            {
                this.AppointmentRowDeleted(this, new AppointmentRowChangeEvent(((AppointmentRow)(e.Row)), e.Action));
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e)
        {
            base.OnRowDeleting(e);
            if ((this.AppointmentRowDeleting != null))
            {
                this.AppointmentRowDeleting(this, new AppointmentRowChangeEvent(((AppointmentRow)(e.Row)), e.Action));
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemoveAppointmentRow(AppointmentRow row)
        {
            this.Rows.Remove(row);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
        {
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            Appointments ds = new Appointments();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "AppointmentDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            return type;
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class AppointmentRow : System.Data.DataRow
    {

        private AppointmentDataTable tableAppointment;

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal AppointmentRow(System.Data.DataRowBuilder rb)
            :
                base(rb)
        {
            this.tableAppointment = ((AppointmentDataTable)(this.Table));
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Title
        {
            get
            {
                try
                {
                    return ((string)(this[this.tableAppointment.TitleColumn]));
                }
                catch (System.InvalidCastException e)
                {
                    throw new System.Data.StrongTypingException("The value for column \'Title\' in table \'Appointment\' is DBNull.", e);
                }
            }
            set
            {
                this[this.tableAppointment.TitleColumn] = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string URL
        {
            get
            {
                try
                {
                    return ((string)(this[this.tableAppointment.URLColumn]));
                }
                catch (System.InvalidCastException e)
                {
                    throw new System.Data.StrongTypingException("The value for column \'URL\' in table \'Appointment\' is DBNull.", e);
                }
            }
            set
            {
                this[this.tableAppointment.URLColumn] = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string ID
        {
            get
            {
                try
                {
                    return ((string)(this[this.tableAppointment.IDColumn]));
                }
                catch (System.InvalidCastException e)
                {
                    throw new System.Data.StrongTypingException("The value for column \'ID\' in table \'Appointment\' is DBNull.", e);
                }
            }
            set
            {
                this[this.tableAppointment.IDColumn] = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.DateTime BeginDate
        {
            get
            {
                try
                {
                    return ((System.DateTime)(this[this.tableAppointment.BeginDateColumn]));
                }
                catch (System.InvalidCastException e)
                {
                    throw new System.Data.StrongTypingException("The value for column \'BeginDate\' in table \'Appointment\' is DBNull.", e);
                }
            }
            set
            {
                this[this.tableAppointment.BeginDateColumn] = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.DateTime EndDate
        {
            get
            {
                try
                {
                    return ((System.DateTime)(this[this.tableAppointment.EndDateColumn]));
                }
                catch (System.InvalidCastException e)
                {
                    throw new System.Data.StrongTypingException("The value for column \'EndDate\' in table \'Appointment\' is DBNull.", e);
                }
            }
            set
            {
                this[this.tableAppointment.EndDateColumn] = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Location
        {
            get
            {
                try
                {
                    return ((string)(this[this.tableAppointment.LocationColumn]));
                }
                catch (System.InvalidCastException e)
                {
                    throw new System.Data.StrongTypingException("The value for column \'Location\' in table \'Appointment\' is DBNull.", e);
                }
            }
            set
            {
                this[this.tableAppointment.LocationColumn] = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Description
        {
            get
            {
                try
                {
                    return ((string)(this[this.tableAppointment.DescriptionColumn]));
                }
                catch (System.InvalidCastException e)
                {
                    throw new System.Data.StrongTypingException("The value for column \'Description\' in table \'Appointment\' is DBNull.", e);
                }
            }
            set
            {
                this[this.tableAppointment.DescriptionColumn] = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Subject
        {
            get
            {
                try
                {
                    return ((string)(this[this.tableAppointment.SubjectColumn]));
                }
                catch (System.InvalidCastException e)
                {
                    throw new System.Data.StrongTypingException("The value for column \'Subject\' in table \'Appointment\' is DBNull.", e);
                }
            }
            set
            {
                this[this.tableAppointment.SubjectColumn] = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Source
        {
            get
            {
                try
                {
                    return ((string)(this[this.tableAppointment.SourceColumn]));
                }
                catch (System.InvalidCastException e)
                {
                    throw new System.Data.StrongTypingException("The value for column \'Source\' in table \'Appointment\' is DBNull.", e);
                }
            }
            set
            {
                this[this.tableAppointment.SourceColumn] = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Recurrent
        {
            get
            {
                try
                {
                    return ((bool)(this[this.tableAppointment.RecurrentColumn]));
                }
                catch (System.InvalidCastException e)
                {
                    throw new System.Data.StrongTypingException("The value for column \'Recurrent\' in table \'Appointment\' is DBNull.", e);
                }
            }
            set
            {
                this[this.tableAppointment.RecurrentColumn] = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool SLKEvent
        {
            get
            {
                try
                {
                    return ((bool)(this[this.tableAppointment.SLKEventColumn]));
                }
                catch (System.InvalidCastException e)
                {
                    throw new System.Data.StrongTypingException("The value for column \'SLKEvent\' in table \'Appointment\' is DBNull.", e);
                }
            }
            set
            {
                this[this.tableAppointment.SLKEventColumn] = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool AllDayEvent
        {
            get
            {
                try
                {
                    return ((bool)(this[this.tableAppointment.AllDayEventColumn]));
                }
                catch (System.InvalidCastException e)
                {
                    throw new System.Data.StrongTypingException("The value for column \'AllDayEvent\' in table \'Appointment\' is DBNull.", e);
                }
            }
            set
            {
                this[this.tableAppointment.AllDayEventColumn] = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsTitleNull()
        {
            return this.IsNull(this.tableAppointment.TitleColumn);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetTitleNull()
        {
            this[this.tableAppointment.TitleColumn] = System.Convert.DBNull;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsURLNull()
        {
            return this.IsNull(this.tableAppointment.URLColumn);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetURLNull()
        {
            this[this.tableAppointment.URLColumn] = System.Convert.DBNull;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsIDNull()
        {
            return this.IsNull(this.tableAppointment.IDColumn);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetIDNull()
        {
            this[this.tableAppointment.IDColumn] = System.Convert.DBNull;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsBeginDateNull()
        {
            return this.IsNull(this.tableAppointment.BeginDateColumn);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetBeginDateNull()
        {
            this[this.tableAppointment.BeginDateColumn] = System.Convert.DBNull;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsEndDateNull()
        {
            return this.IsNull(this.tableAppointment.EndDateColumn);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetEndDateNull()
        {
            this[this.tableAppointment.EndDateColumn] = System.Convert.DBNull;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsLocationNull()
        {
            return this.IsNull(this.tableAppointment.LocationColumn);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetLocationNull()
        {
            this[this.tableAppointment.LocationColumn] = System.Convert.DBNull;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsDescriptionNull()
        {
            return this.IsNull(this.tableAppointment.DescriptionColumn);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetDescriptionNull()
        {
            this[this.tableAppointment.DescriptionColumn] = System.Convert.DBNull;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsSubjectNull()
        {
            return this.IsNull(this.tableAppointment.SubjectColumn);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetSubjectNull()
        {
            this[this.tableAppointment.SubjectColumn] = System.Convert.DBNull;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsSourceNull()
        {
            return this.IsNull(this.tableAppointment.SourceColumn);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetSourceNull()
        {
            this[this.tableAppointment.SourceColumn] = System.Convert.DBNull;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsRecurrentNull()
        {
            return this.IsNull(this.tableAppointment.RecurrentColumn);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetRecurrentNull()
        {
            this[this.tableAppointment.RecurrentColumn] = System.Convert.DBNull;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsSLKEventNull()
        {
            return this.IsNull(this.tableAppointment.SLKEventColumn);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetSLKEventNull()
        {
            this[this.tableAppointment.SLKEventColumn] = System.Convert.DBNull;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsAllDayEventNull()
        {
            return this.IsNull(this.tableAppointment.AllDayEventColumn);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetAllDayEventNull()
        {
            this[this.tableAppointment.AllDayEventColumn] = System.Convert.DBNull;
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class AppointmentRowChangeEvent : System.EventArgs
    {

        private AppointmentRow eventRow;

        private System.Data.DataRowAction eventAction;

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public AppointmentRowChangeEvent(AppointmentRow row, System.Data.DataRowAction action)
        {
            this.eventRow = row;
            this.eventAction = action;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public AppointmentRow Row
        {
            get
            {
                return this.eventRow;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Data.DataRowAction Action
        {
            get
            {
                return this.eventAction;
            }
        }
    }
}
